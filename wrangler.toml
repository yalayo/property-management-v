name = "pmanagement"
main = "server/worker.ts"
compatibility_date = "2024-09-23"
compatibility_flags = ["nodejs_compat"]

# For local development, use existing DB config
[env.development]
# keep using local database

# Production with D1 database
[env.production]
vars = { NODE_ENV = "production" }
# Bind the D1 database to the Worker
[[env.production.d1_databases]]
binding = "DB" # available in production as env.DB
database_name = "landlord-db"
database_id = "${DATABASE_ID}" # will be filled via GitHub Actions
migrations_dir = "migrations/d1" # Directory where the migration SQL files are stored
migrations_table = "drizzle_migrations" # Table to track migrations

# Secrets that will be set via GitHub Actions or wrangler
# - STRIPE_SECRET_KEY
# - VITE_STRIPE_PUBLIC_KEY
# - GOOGLE_GEMINI_API_KEY

# Build configuration
[build]
command = "npm run build" 
watch_dir = ["server", "shared"]

# Mark Node.js-specific modules as external to avoid bundling issues
[build.upload]
format = "modules"

# Explicitly mark problematic modules as external to exclude from bundling
[build.external]
external = ["postgres", "pg", "pg-native", "crypto", "url", "path", "util", "fs", "@neondatabase/serverless", "ws", "drizzle-orm/postgres-js", "express-session", "connect-pg-simple", "memorystore"]

[observability.logs]
enabled = true

# Configure static asset handling
[site]
bucket = "./dist" # Where your built client assets are located

# Asset configuration
[env.production.site]
bucket = "./dist"
include = ["**/*"]  # Include all files from the bucket

# Static content binding via KV namespace (__STATIC_CONTENT is a special binding name)
# In Cloudflare, this maps to the KV namespace: __STATIC_CONTENT
# This is managed automatically by Cloudflare Workers

# For backward compatibility, also define the ASSETS binding
# This allows our code to work with both binding types
[[env.production.bindings]]
name = "ASSETS"
type = "site"

# Define routes for the SPA
[[env.production.routes]]
pattern = "immo.busqandote.com"
custom_domain = true