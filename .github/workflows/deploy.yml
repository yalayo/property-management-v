name: Deploy to Cloudflare Workers

on:
  push:
    branches:
      - main  # Change this to your main branch name if different

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          
      - name: Install dependencies
        run: npm install
      
      - name: Build frontend
        run: npm run build

      - name: Check if D1 database exists
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          if wrangler d1 list | grep -q 'landlord_db'; then
            echo "D1 database exists, skipping creation."
            echo "DB_EXISTS=true" >> $GITHUB_ENV
          else
            echo "D1 database does not exist, creating..."
            echo "DB_EXISTS=false" >> $GITHUB_ENV
          fi
        
      # Creating the D1 database if it doesn't exist
      - name: Create D1 Database (if not exists)
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          command: d1 create landlord_db
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      
      # Get the database ID for the D1 database
      - name: Get D1 Database ID
        id: get-db-id
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          command: d1 list --json
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          
      # Extract database ID from the JSON output
      - name: Set Database ID
        id: set-db-id
        run: |
          DB_LIST='${{ steps.get-db-id.outputs.result }}'
          DB_ID=$(echo $DB_LIST | jq -r '.[] | select(.name=="landlord_db") | .uuid')
          echo "DATABASE_ID=$DB_ID" >> $GITHUB_ENV
          
      # Update wrangler.toml with the database ID
      - name: Update wrangler.toml with Database ID
        run: |
          sed -i "s/\${DATABASE_ID}/${{ env.DATABASE_ID }}/g" wrangler.toml
      
      # Apply migrations to D1 database
      - name: Apply D1 Migrations
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          command: d1 migrations apply landlord_db
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
            
      # Deploy to Cloudflare Workers
      - name: Deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          command: deploy --env production
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          VITE_STRIPE_PUBLIC_KEY: ${{ secrets.VITE_STRIPE_PUBLIC_KEY }}
          GOOGLE_GEMINI_API_KEY: ${{ secrets.GOOGLE_GEMINI_API_KEY }}